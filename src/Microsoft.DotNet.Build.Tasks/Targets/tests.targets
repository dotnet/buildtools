<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This is the target that copies the test assets to the test output -->
  <Import Project="$(MSBuildThisFileDirectory)publishtest.targets" />

  <!-- Which categories of tests to run by default -->
  <PropertyGroup>
    <RunTestsWithCategories Condition="'$(RunTestsWithCategories)' == '' And '$(RunTestsWithoutCategories)' == ''">InnerLoop</RunTestsWithCategories>
    <TestCategories Condition="'$(TestCategories)'==''">InnerLoop</TestCategories>

    <TestDisabled>false</TestDisabled>
    <TestDisabled Condition="'$(IsTestProject)'!='true' Or '$(SkipTests)'=='true' Or '$(RunTestsForProject)'=='false'">true</TestDisabled>
  </PropertyGroup>

  <ItemGroup>
    <!-- Split semicolon separated lists -->
    <TestCategoriesItems Include="$(TestCategories)" />
    <RunTestsWithCategoriesItems Include="$(RunTestsWithCategories)" />
    <RunTestsWithoutCategoriesItems Include="$(RunTestsWithoutCategories)" />
  </ItemGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <XunitHost>corerun.exe</XunitHost>
    <TestHost>$(XunitHost)</TestHost>
    <XunitCommandLine>xunit.console.netcore.exe $(TargetFileName)</XunitCommandLine>
    <XunitOptions>$(XunitOptions) -xml .\testResults.xml</XunitOptions>
    <XunitOptions>$(XunitOptions) -notrait category=failing</XunitOptions>

    <!-- We need to exclude xunit traits and add wait option for VS -->
    <VSStartArguments>$(XunitCommandLine) $(XunitOptions) -wait</VSStartArguments>
    <XunitOptions>$(XunitOptions) {XunitTraitOptions}</XunitOptions>
    <TestCommandLine>$(XunitCommandLine) $(XunitOptions)</TestCommandLine>
  </PropertyGroup>

  <!-- The Code Coverage targets will override TestHost and TestCommandLine if coverage is enabled -->
  <Import Project="$(MSBuildThisFileDirectory)CodeCoverage.targets" />

  <!-- import settings for perf testing -->
  <Import Project="$(MSBuildThisFileDirectory)PerfTesting.targets" />

  <!-- In VS (2015 Preview or later currently required): Debug to run unit tests on CoreCLR. -->
  <PropertyGroup Condition="'$(IsTestProject)'=='true'">
    <DebugTestFrameworkFolder>aspnetcore50</DebugTestFrameworkFolder>
    <StartWorkingDirectory Condition="'$(StartWorkingDirectory)'==''">$(TestPath)$(DebugTestFrameworkFolder)</StartWorkingDirectory>
    <StartAction Condition="'$(StartAction)'==''">Program</StartAction>
    <StartProgram Condition="'$(StartProgram)'==''">$(StartWorkingDirectory)\$(TestHost)</StartProgram>
    <StartArguments Condition="'$(StartArguments)'==''">$(VSStartArguments)</StartArguments>
    <DebugEngines>{2E36F1D4-B23C-435D-AB41-18E608940038}</DebugEngines>
  </PropertyGroup>

  <!--
    combine the TestTargetFramework with IterationCount.  by batching on TestTargetFrameworkBatch
    in the RunTestsForProject Outputs it effectively allows us to run the target multiple times,
    once for each IterationCount.  if IterationCount isn't defined there is no effect.  right now
    this is used for perf testing which requires us to run a test multiple iterations and aggregate
    the results.
  -->
  <Target Name="InitIterationBatch"
          BeforeTargets="RunTestsForProject">

    <ItemGroup>
      <TestTargetFrameworkBatch Include="@(TestTargetFramework)">
        <Count>%(IterationCount.Identity)</Count>
      </TestTargetFrameworkBatch>
    </ItemGroup>

  </Target>

  <!-- On command line run unit tests on CoreCLR after the Test target -->
  <Target Name="RunTestsForProject"
          AfterTargets="CheckTestCategories"
          Condition="'$(TestDisabled)'!='true'"
          Outputs="%(TestTargetFrameworkBatch.Folder) %(TestTargetFrameworkBatch.Count)">

    <PropertyGroup>
      <XunitTraitOptions Condition="'@(RunWithTraits)'!=''">$(XunitTraitOptions) -trait category=@(RunWithTraits, ' -trait category=') </XunitTraitOptions>
      <XunitTraitOptions Condition="'@(RunWithoutTraits)'!=''">$(XunitTraitOptions) -notrait category=@(RunWithoutTraits, ' -notrait category=') </XunitTraitOptions>
    </PropertyGroup>

    <!-- Append the xunit trait options to the end of the TestCommandLine -->
    <PropertyGroup>
      <TestCommandLine>$(TestCommandLine.Replace('{XunitTraitOptions}', '$(XunitTraitOptions)'))</TestCommandLine>
      <EventTracerDataFile>$(TargetFileName)%(TestTargetFrameworkBatch.Count).etl</EventTracerDataFile>
      <EventTracerMetrics>-c $(ClrMetrics) -k $(KernelMetrics)</EventTracerMetrics>
      <EventTracerReport>Perf.$(MSBuildProjectName)%(TestTargetFrameworkBatch.Count).xml</EventTracerReport>
    </PropertyGroup>

    <MakeDir Condition="'$(CoverageEnabledForProject)'=='true'" Directories="$(CoverageReportDir)" />

    <Exec Command="$(EventTracer) -m start -t $(TargetFileName) -d $(EventTracerDataFile) $(EventTracerMetrics)"
          WorkingDirectory="$(TestPath)%(TestTargetFrameworkBatch.Folder)"
          Condition="'$(CollectPerfEvents)' == 'true'" />

    <Exec Command="$(TestHost) $(TestCommandLine)"
          WorkingDirectory="$(TestPath)%(TestTargetFrameworkBatch.Folder)"
          ContinueOnError="true">
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Exec Command="$(EventTracer) -m stop -t $(TargetFileName) -d $(EventTracerDataFile) $(EventTracerMetrics) -x $(EventTracerReport) -p CoreRun"
          WorkingDirectory="$(TestPath)%(TestTargetFrameworkBatch.Folder)"
          Condition="'$(CollectPerfEvents)' == 'true'" />

    <Delete Condition="'$(DeletePerfDataFile)' == 'true'" Files="$(TestPath)%(TestTargetFrameworkBatch.Folder)\$(EventTracerDataFile)" />
    <Error Condition="'$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check log for details!" />
  </Target>

  <!-- Needs to run before RunTestsForProject target as it computes categories and set TestDisabled -->
  <Target Name="CheckTestCategories"
          AfterTargets="Test"
          Condition="'$(TestDisabled)'!='true'">

    <Error Condition="'$(RunTestsWithCategories)' != '' And '$(RunTestsWithoutCategories)' != ''"
           Text="Specifying both RunTestsWithCategories and RunTestsWithoutCategories is not supported please only specify one or the other." />

    <!-- Intersection of TestCategoriesItems and RunTestsWithCategoriesItems -->
    <ItemGroup Condition="'@(RunTestsWithCategoriesItems)'!=''">
      <TestCategoriesToRun Include="@(TestCategoriesItems)" Condition="'@(RunTestsWithCategoriesItems)'=='%(Identity)'" />
    </ItemGroup>

    <!-- Run all test categories except specified -->
    <ItemGroup Condition="'@(RunTestsWithoutCategoriesItems)'!=''">
      <TestCategoriesToRun Include="@(TestCategoriesItems)" Exclude="@(RunTestsWithoutCategoriesItems)" />
    </ItemGroup>

    <ItemGroup>
      <RunWithInnerLoopItems Include="@(TestCategoriesToRun)" Condition="'%(TestCategoriesToRun.Identity)'=='InnerLoop'" />
      <RunWithTraits Condition="'@(RunWithInnerLoopItems)'==''" Include="@(TestCategoriesToRun)" />
      <RunWithoutTraits Condition="'@(RunWithInnerLoopItems)'!=''" Include="@(TestCategoriesItems)" Exclude="@(TestCategoriesToRun)" />
    </ItemGroup>

    <!-- If there is nothing to run then disable the test -->
    <PropertyGroup>
      <TestDisabled Condition="'@(TestCategoriesToRun)'==''">true</TestDisabled>
    </PropertyGroup>
  </Target>

</Project>
