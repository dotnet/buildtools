<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="PrereleaseResolveNuGetPackageAssets" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <!-- Hook both partial-facade-related targets into TargetsTriggeredByCompilation. This will cause them
          to only be invoked upon a successful compilation; they can conceptualized as an extension
          of the assembly compilation process.
  -->

  <!-- If a reference assembly project exists for the partial facade, prefer that over the package  -->
  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)' == 'true'">
    <ResolveReferencesDependsOn>
      FindPartialFacadeProjectReference;
      $(ResolveReferencesDependsOn)
    </ResolveReferencesDependsOn>
    <CleanDependsOn>
      FindPartialFacadeProjectReference;
      $(CleanDependsOn);
    </CleanDependsOn>
  </PropertyGroup>
  
  <Target Name="FindPartialFacadeProjectReference">
    <PropertyGroup>
      <_referenceAssemblyProject>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), 'ref/$(AssemblyName).csproj'))/ref/$(AssemblyName).csproj</_referenceAssemblyProject>
      <_versionReferenceAssemblyProject>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), 'ref/$(APIVersion)/$(AssemblyName).csproj'))/ref/$(APIVersion)/$(AssemblyName).csproj</_versionReferenceAssemblyProject>
    </PropertyGroup>
    <ItemGroup>
      <!-- first check for a specific version -->
      <ProjectReference Include="$(_versionReferenceAssemblyProject)" Condition="Exists('$(_versionReferenceAssemblyProject)')">
        <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
        <OutputItemType>ResolvedMatchingContract</OutputItemType>
        <UndefineProperties>OSGroup;TargetGroup</UndefineProperties>
      </ProjectReference>
      <!-- fall back to 'current' version -->
      <ProjectReference Include="$(_referenceAssemblyProject)" Condition="!Exists('$(_versionReferenceAssemblyProject)') AND Exists('$(_referenceAssemblyProject)')">
        <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
        <OutputItemType>ResolvedMatchingContract</OutputItemType>
        <UndefineProperties>OSGroup;TargetGroup</UndefineProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!-- Inputs and outputs of FillPartialFacade -->
  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)' == 'true'">
    <PartialFacadeAssemblyPath>$(IntermediateOutputPath)$(TargetName)$(TargetExt)</PartialFacadeAssemblyPath>
    <PartialFacadeSymbols>$(IntermediateOutputPath)$(TargetName).pdb</PartialFacadeSymbols>
    <GenFacadesInputPath>$(IntermediateOutputPath)PreGenFacades/</GenFacadesInputPath>
    <GenFacadesInputAssembly>$(GenFacadesInputPath)$(TargetName)$(TargetExt)</GenFacadesInputAssembly>
    <GenFacadesInputSymbols>$(GenFacadesInputPath)$(TargetName).pdb</GenFacadesInputSymbols>
    <GenFacadesOutputPath>$(IntermediateOutputPath)</GenFacadesOutputPath>
  </PropertyGroup>

  <Import Condition="'$(GenFacadesTaskAssemblyPath)' != ''" Project="partialfacades.buildtask.targets" />
  <Import Condition="'$(GenFacadesTaskAssemblyPath)' == ''" Project="partialfacades.exe.targets" />

</Project>
