<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="LocalUpdatePublishedVersions" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="UpdateDependencies" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="UpdateDependenciesAndSubmitPullRequest" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="UpdatePublishedVersions" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="UpdateToRemoteDependencies" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />
  <UsingTask TaskName="VerifyDependencies" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <PropertyGroup>
    <!-- Cache of build info files retrieved from versions repository. -->
    <BuildInfoCacheDir>$(ToolsDir)BuildInfoCache/</BuildInfoCacheDir>
  </PropertyGroup>

  <ItemGroup Condition="'$(ShippedNuGetPackageGlobPath)'!=''">
    <ShippedNuGetPackage Include="$(ShippedNuGetPackageGlobPath)" />
  </ItemGroup>

  <ItemGroup Condition="'$(NotifyGitHubUsers)'!=''">
    <NotifyGitHubUsers Include="$(NotifyGitHubUsers)" />
  </ItemGroup>

  <Target Name="CreateDefaultDependencyInfos">
    <ItemGroup>
      <!-- For backward compatibility, Include XmlUpdateSteps as Xml-type updaters. -->
      <UpdateStep Include="@(XmlUpdateStep)">
        <UpdaterType>Xml</UpdaterType>
      </UpdateStep>

      <!-- For backward compatibility, create DependencyInfos for DependencyBuildInfos. -->
      <DependencyInfo Include="@(DependencyBuildInfo)">
        <DependencyType>Build</DependencyType>
      </DependencyInfo>

      <!--
        For submodule updaters with no matching custom DependencyInfo, create default ones.
        The metadata names match up.
      -->
      <DependencyInfo Include="@(UpdateStep)"
                      Condition="'%(UpdateStep.UpdaterType)' == 'Submodule from latest'">
        <DependencyType>Submodule</DependencyType>
      </DependencyInfo>
    </ItemGroup>
  </Target>

  <Target Name="UpdatePublishedVersions">
    <UpdatePublishedVersions ShippedNuGetPackage="@(ShippedNuGetPackage)"
                             VersionsRepoPath="$(VersionsRepoPath)"
                             GitHubAuthToken="$(GitHubAuthToken)"
                             GitHubUser="$(GitHubUser)"
                             GitHubEmail="$(GitHubEmail)"
                             VersionsRepo="$(VersionsRepo)"
                             VersionsRepoOwner="$(VersionsRepoOwner)" />
  </Target>

  <Target Name="LocalUpdatePublishedVersions">
    <LocalUpdatePublishedVersions ShippedNuGetPackage="@(ShippedNuGetPackage)"
                                  VersionsRepoLocalBaseDir="$(VersionsRepoLocalBaseDir)"
                                  VersionsRepoPath="$(VersionsRepoPath)" />
  </Target>

  <Target Name="UpdateDependencies"
          DependsOnTargets="CreateDefaultDependencyInfos">
    <UpdateDependencies DependencyInfo="@(DependencyInfo)"
                        ProjectJsonFiles="@(ProjectJsonFiles)"
                        UpdateStep="@(UpdateStep)"
                        BuildInfoCacheDir="$(BuildInfoCacheDir)" />
  </Target>

  <Target Name="VerifyDependencies"
          DependsOnTargets="CreateDefaultDependencyInfos"
          Condition="'$(SkipVerifyPackageVersions)'!='true'">
    <!-- Add message so it's clear what's happening when building with verbosity:minimal. For example, "sync -p". -->
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Verifying all auto-upgradeable dependencies..." />

    <VerifyDependencies DependencyInfo="@(DependencyInfo)"
                        ProjectJsonFiles="@(ProjectJsonFiles)"
                        UpdateStep="@(UpdateStep)"
                        BuildInfoCacheDir="$(BuildInfoCacheDir)" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Verifying all auto-upgradeable dependencies... Done." />
  </Target>

  <!--
    Update to the latest dependencies available remotely. A "UpdateDependencies" call uses the local
    source of truth, but this looks up the latest truth on the remote. For example, this uses the
    latest dotnet/versions remote commit for build-infos, and it uses the project's GitHub
    repository to find the latest commit for a submodule.

    If using the remote causes any updates, the local source of truth is modified to match it.
  -->
  <Target Name="UpdateToRemoteDependencies"
          DependsOnTargets="CreateDefaultDependencyInfos">
    <UpdateToRemoteDependencies DependencyInfo="@(DependencyInfo)"
                                ProjectJsonFiles="@(ProjectJsonFiles)"
                                UpdateStep="@(UpdateStep)"
                                CurrentRefXmlPath="$(CurrentRefXmlPath)" />
  </Target>

  <!--
    Update to the latest dependencies available remotely, then submit a pull request.
  -->
  <Target Name="UpdateDependenciesAndSubmitPullRequest"
          DependsOnTargets="CreateDefaultDependencyInfos">
    <UpdateDependenciesAndSubmitPullRequest DependencyInfo="@(DependencyInfo)"
                                            ProjectJsonFiles="@(ProjectJsonFiles)"
                                            UpdateStep="@(UpdateStep)"
                                            ProjectRepoName="$(ProjectRepoName)"
                                            ProjectRepoOwner="$(ProjectRepoOwner)"
                                            ProjectRepoBranch="$(ProjectRepoBranch)"
                                            GitHubAuthToken="$(GitHubAuthToken)"
                                            GitHubUser="$(GitHubUser)"
                                            GitHubEmail="$(GitHubEmail)"
                                            GitHubAuthor="$(GitHubAuthor)"
                                            NotifyGitHubUsers="@(NotifyGitHubUsers)"
                                            CurrentRefXmlPath="$(CurrentRefXmlPath)"
                                            AlwaysCreateNewPullRequest="$(AlwaysCreateNewPullRequest)"
                                            CommitMessage="$(CommitMessage)" />
  </Target>
</Project>